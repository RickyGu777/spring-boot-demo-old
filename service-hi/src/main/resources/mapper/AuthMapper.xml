<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.servicehi.dao.AuthDao">
    <resultMap id="AuthResult" type="com.example.servicehi.entity.Auth">
        <result column="UUID" property="uuid"/>
        <result column="METHOD" property="method"/>
        <result column="CLASS_NAME" property="className"/>
        <result column="TYPE" property="type"/>
        <result column="URL" property="url"/>
        <result column="AUTH_NAME" property="authName"/>
        <result column="DEFAULT_CHECK" property="defaultCheck"/>
        <result column="AUTH_TYPE" property="authType"/>
        <result column="CLASS_GROUP" property="classGroup"/>
    </resultMap>

    <insert id="insert" parameterType="Auth">
      insert into AUTH (UUID, METHOD, CLASS_NAME, TYPE, URL, AUTH_NAME, DEFAULT_CHECK, AUTH_TYPE, CLASS_GROUP)
      values
      (#{uuid},#{method},#{className},#{type},#{url},#{authName},#{defaultCheck},#{authType},#{classGroup})
    </insert>

    <select id="selectAll" resultMap="AuthResult">
        select * from AUTH
    </select>

    <select id="selectByUrl" resultMap="AuthResult" parameterType="Auth">
        select * from AUTH where URL = #{url}
    </select>

    <delete id="delete" parameterType="Auth">
        delete from AUTH where URL = #{url} and METHOD = #{method} and CLASS_NAME = #{className}
        <if test="type!=null and type!=''">
            and TYPE = #{type}
        </if>
    </delete>

    <update id="updateAuthName" parameterType="Auth">
        update AUTH set AUTH_NAME = #{authName}  where URL = #{url};
    </update>

    <resultMap id="AuthDtoResult" type="AuthDto" extends="AuthResult">
        <collection property="authList" column="{classGroup=AUTH_NAME}"
                    ofType="AuthDto" select="com.example.servicehi.dao.AuthDao.selectByGroup"/>
    </resultMap>

    <select id="selectAuthTree" parameterType="AuthDto" resultMap="AuthDtoResult">
        select CLASS_GROUP as AUTH_NAME from AUTH
        where 1 = 1
        <if test="authType!=null and authType!=''">
            and AUTH_TYPE = #{authType}
        </if>
        <if test="classGroup!=null and classGroup!=''">
            and CLASS_GROUP = #{classGroup}
        </if>
        group by CLASS_GROUP
    </select>

    <select id="selectByGroup" resultMap="AuthResult" parameterType="Auth">
        select * from AUTH where CLASS_GROUP = #{classGroup};
    </select>
</mapper>